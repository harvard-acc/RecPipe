# MPL Boilerplate
from __future__ import absolute_import, division, print_function, unicode_literals

import matplotlib
import json
matplotlib.use('Agg')
# pylint: disable=unused-import
import matplotlib.pyplot as plt
#from mpl_toolkits.mplot3d import Axes3D
from matplotlib import rcParams
# pylint: disable=unused-import
import matplotlib.cm as cm
import matplotlib.patches
# pylint: disable=unused-import
import matplotlib as mpl
# pylint: disable=unused-import
import numpy as np

def rgb(r,g,b):
  return (float(r)/256.,float(g)/256.,float(b)/256.)
# Plot colors:
#   visually distinct under colorblindness and grayscale
crimsons = []
crimsons.append( rgb(172, 64, 64) )
crimsons.append( rgb(56, 21, 21) )

blues = []
blues.append( rgb(31, 74, 96) )
blues.append( rgb(82, 158, 198) )

greens = []
greens.append( rgb(36, 92, 59))
greens.append( rgb(90, 191, 132))

black = rgb(0, 0, 0)
grey  = rgb(128, 128, 128)

oranges = []
oranges.append(rgb(250, 174, 83))
oranges.append(rgb(194,134,64))

purples = []
purples.append( rgb(112, 65, 204))
purples.append( rgb(74, 43, 136))

crimson = rgb(172,63,64)
blue    = rgb(62,145,189)
teal    = rgb(98,189,153)
orange  = rgb(250,174,83)
#   luminance channel sweeps from dark to light, (for ordered comparisons)
clr = [crimson, blue, teal, orange]
mrk = ['o', 'o', 'D','D', "^", '^', ">", ">", 's', 's', "*", '*', "v", 'v', "h", "h"]
rcParams['figure.figsize'] = (8,6) # (w,h)
rcParams['figure.dpi'] = 150
# !$%ing matplotlib broke the interface. Why would you *replace* this!? >:(
try:
  from cycler import cycler
  rcParams['axes.prop_cycle'] = cycler('color',clr)
except ImportError:
  rcParams['axes.color_cycle'] = clr
rcParams['lines.linewidth'] = 2
rcParams['lines.marker'] = None
rcParams['lines.markeredgewidth'] = 0
rcParams['axes.facecolor'] = 'white'
rcParams['font.size'] = 26
rcParams['patch.edgecolor'] = 'black'
rcParams['patch.facecolor'] = clr[0]
rcParams['xtick.major.pad'] = 10
rcParams['xtick.minor.pad'] = 8
rcParams['ytick.major.pad'] = 10
rcParams['ytick.minor.pad'] = 8
rcParams['xtick.direction'] = 'in'
rcParams['ytick.direction'] = 'in'
#rcParams['font.family'] = 'Helvetica'
#rcParams['font.family'] = 'Liberation Sans'
rcParams['font.family'] = 'serif'
rcParams['font.serif'] = 'Times'
rcParams['font.weight'] = 100
#rcParams['text.usetex'] = True


class MemoPlot(object):
  '''Abstract base class for a reproducible, persistable, and memoizing plotter.'''
  def __init__(self, mpl_params=None):
    # three JSON objects
    self.data = {} # data, generated by generate
    if mpl_params is None:
      self.mpl_params = {} # plotting kwargs
    self.config = {} # settings used for plotting

  def generate(self):
    '''Override this function to collect data for a plot.'''
    pass

  def plot(self, ax):
    '''Override this function to reproduce the plot from saved data.'''
    ax.plot(self.data, **self.mpl_params)

  def save(self, filename='memoplot.json'):
    D = { \
      'data': self.data, \
      'mpl_params': self.mpl_params, \
      'config': self.config \
    }

    with open(filename,'w') as fp:
      json.dump(D, fp)
      print ('[MemoPlot]: File "'+str(filename)+'" saved.')

  def load(self, filename='memoplot.json'):
    with open(filename,'r') as fp:
      D = json.load(fp)
      self.data = D['data']
      self.mpl_params = D['mpl_params']
      self.config = D['config']
      print ('[MemoPlot]: File "'+str(filename)+'" loaded.')
